%%% -*- erlang-indent-level: 2 -*-
%%%
%%%   Copyright 2014-2022 Mikael Pettersson
%%%
%%%   Licensed under the Apache License, Version 2.0 (the "License");
%%%   you may not use this file except in compliance with the License.
%%%   You may obtain a copy of the License at
%%%
%%%       http://www.apache.org/licenses/LICENSE-2.0
%%%
%%%   Unless required by applicable law or agreed to in writing, software
%%%   distributed under the License is distributed on an "AS IS" BASIS,
%%%   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%%%   See the License for the specific language governing permissions and
%%%   limitations under the License.
%%%
%%% es_ctype.erl
%%% Character classification and manipulation for ErlScheme.
%%% This currently assumes that the range of characters is [0..255],
%%% that we represent EOF as -1, and that 7-bit ASCII is contained
%%% in the lower 7 bits of character codes.

-module(es_ctype).

-export([char_is_whitespace/1,	% [-1, 255] -> true | false
	 char_is_delimiter/1,	% [-1, 255] -> true | false
	 char_is_initial/1,	% [-1, 255] -> true | false
	 char_is_numeric/1,	% [-1, 255] -> true | false
	 char_is_subsequent/1,	% [-1, 255] -> true | false
	 char_is_eof/1,		% [-1, 255] -> true | false
	 char_value/1]).	% [-1, 255] -> [0-15, 255]

%% Character classification flag bits:
%%
%% 16#01: whitespace
%% 16#02: delimiter	(used by the reader; also allows #\[ and #\])
%% 16#04: initial	(used by the reader; also allows #\@)
%% 16#08: numeric
%% 16#10: subsequent	(used by the reader)

char_is_type(Ch, Mask) ->
  ChTypeTab = % indexed by [-1, 255] + 1
    <<
     "\x02" % EOF is a delimiter but not whitespace
     "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x03\x00\x03\x03\x00\x00"
     "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
     "\x03\x14\x02\x00\x14\x14\x14\x00\x02\x02\x14\x10\x00\x10\x10\x14"
     "\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x14\x02\x14\x14\x14\x14"
     "\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14"
     "\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x02\x00\x02\x14\x14"
     "\x00\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14"
     "\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x00\x00\x00\x14\x00"
     "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
     "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
     "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
     "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
     "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
     "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
     "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
     "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00">>,
  (binary:at(ChTypeTab, Ch + 1) band Mask) =/= 0.

char_is_whitespace(Ch) -> char_is_type(Ch, 16#01).
char_is_delimiter(Ch) -> char_is_type(Ch, 16#02).
char_is_initial(Ch) -> char_is_type(Ch, 16#04).
char_is_numeric(Ch) -> char_is_type(Ch, 16#08).
char_is_subsequent(Ch) -> char_is_type(Ch, 16#10).
char_is_eof(Ch) -> Ch =:= -1.

char_value(Ch) ->
  ChValueTab = % indexed by [-1, 255] + 1
    <<
     "\xFF"
     "\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"
     "\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"
     "\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"
     "\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\xFF\xFF\xFF\xFF\xFF\xFF"
     "\xFF\x0A\x0B\x0C\x0D\x0E\x0F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"
     "\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"
     "\xFF\x0A\x0B\x0C\x0D\x0E\x0F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"
     "\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"
     "\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"
     "\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"
     "\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"
     "\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"
     "\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"
     "\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"
     "\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"
     "\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF">>,
  binary:at(ChValueTab, Ch + 1).
